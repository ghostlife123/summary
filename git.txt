
something just like this
I've been reading books of old 
The legends and the myths 
git 名称
	workspace 	工作区
	index/stage 暂存区
	repository 	仓库区
	remote		远程仓库
F:/GitDownload/summary/pic/git.jpg
git 命令
	git add <filename> 将文件添加到暂存区	多个文件用空格分隔;
	git commit -m "注释" 将文件提交到分支
	touch <filename> 新建一个文件
	cat <filename>  查看文件内容
	git log 查看最近3次日志
	git log --pretty=oneline	简要信息日志
	git reflog 查看版本号
	git status 查看提交状态
	git diff <filename>	查看修改的内容
	git reset --hard HEAD^	回退到上个版本
			  上上个版本 HEAD^^	
			  往上一百个版本 HEAD~100
	git reset --hard <版本号>	回退到版本号版本
	git 撤销以及删除
		1.撤销
		第一种:直接修改文件,手动add到暂存区,最后commit;
		第二种:git reset --hard HEAD^
		第三种:在git status后,
			可以git checkout --<filename>把filename文件在工作区做的修改全部撤销掉
			git checkout --<filename>中 如果没有-- 就变成了创建分支
		2.删除
			rm <filename>	
				需要commit 才能从版本库中彻底删除
					git commit
				或者可以从版本库中回复删除的文件
					git checkout --<filename>
	git fetch
		1.从远程的origin仓库的master主分支更新最新的版本到origin/master分支上
		2.比较本地的master分支和origin/master分支的差别
		3.合并内容到本地的master分支
	git merge	合并两个分支
	git
	git push <远程主机名> <本地分支名>:<远程分支名>	推送
		$ git push origin master
			将本地的master分支推动到origin主机的master分支,
			如果后者存在,则会被新建,origin是一个远程仓库的地址
		$ git push origin :master 等同于 $ git push origin --delete master
			456
			 删除origin主机的master分支
		
		
		
		
		
	git pull
		
	远程仓库
		本地生成SSH key
		登录github 添加key
		远程仓库的建立
			github 上 create a new repo 创建一个新的仓库
	冲突解决
	1。直接拉取文件，修改冲那个图文件
		几个开发者修改了同一处代码，先pull服务器代码到本地，决定保留哪一份，然后再push到服务器上
	2.使用git stash
		git stash 暂存修改
		git stash list 查看暂存列表
		git stash pop statsh{id)或者git stash apply 还原暂存内容
		
		
		
		
		
		
命令git	
git diff # 比较当前文件和暂存区文件差异 git diff 
git diff # 比较两次提交之间的差异 
git diff .. # 在两个分支之间比较 
git diff –staged # 比较暂存区和版本库差异 
git diff –cached # 比较暂存区和版本库差异 
git diff –stat # 仅仅比较统计信息 
查看提交记录 
git log git log # 查看该文件每次提交记录 
git log -p # 查看每次详细修改内容的diff 
git log -p -2 # 查看最近两次详细修改内容的diff 
git log –stat #查看提交统计信息 
tig 
Mac上可以使用tig代替diff和log，brew install tig 
Git 本地分支管理 
查看、切换、创建和删除分支 
git br -r # 查看远程分支 
git br # 创建新的分支 
git br -v # 查看各个分支最后提交信息 
git br –merged # 查看已经被合并到当前分支的分支 
git br –no-merged # 查看尚未被合并到当前分支的分支 
git co # 切换到某个分支 
git co -b # 创建新的分支，并且切换过去 
git co -b # 基于branch创建新的new_branch 
git co id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除  
git coid -b # 把某次历史提交记录checkout出来，创建成一个分支 
git br -d # 删除某个分支 
git br -D # 强制删除某个分支 (未被合并的分支被删除的时候需要强制) 
分支合并和rebase 
git merge # 将branch分支合并到当前分支 
git merge origin/master –no-ff # 不要Fast-Foward合并，这样可以生成merge提交 
git rebase master # 将master rebase到branch，相当于： git co && git rebase master && git co master && git merge 
Git补丁管理(方便在多台机器上开发同步时用) 
git diff > ../sync.patch # 生成补丁 
git apply ../sync.patch # 打补丁 
git apply –check ../sync.patch #测试补丁能否成功 
Git暂存管理 
git stash # 暂存 
git stash list # 列所有stash 
git stash apply # 恢复暂存的内容 
git stash drop # 删除暂存区 
Git远程分支管理 
git pull # 抓取远程仓库所有分支更新并合并到本地 
git pull –no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并 
git fetch origin # 抓取远程仓库更新 
git merge origin/master # 将远程主分支合并到本地当前分支 
git co –track origin/branch # 跟踪某个远程分支创建相应的本地分支 
git co -b origin/ # 基于远程分支创建本地分支，功能同上 
git push # push所有分支 
git push origin master # 将本地主分支推到远程主分支 
git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库) 
git push origin # 创建远程分支， origin是远程仓库名 
git push origin : # 创建远程分支 
git push origin : #先删除本地分支(git br -d )，然后再push删除远程分支 
Git远程仓库管理 
GitHub 
git remote -v # 查看远程服务器地址和仓库名称 
git remote show origin # 查看远程服务器仓库状态 
git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址 
git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm # 删除远程仓库 
创建远程仓库 
git clone –bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库 
scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上 
mkdir robbin_site.git && cd robbin_site.git && git –bare init # 在服务器创建纯仓库 
git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址 
git push -u origin master # 客户端首次提交 
git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track 
git remote set-head origin master # 设置远程仓库的HEAD指向master分支 
也可以命令设置跟踪远程库和本地库 
git branch –set-upstream master origin/master 
git branch –set-upstream develop origin/develop

查看、添加、提交、删除、找回，重置修改文件 
git help # 显示command的help 
git show # 显示某次提交的内容 git show $id 
git co – # 抛弃工作区修改 
git co . # 抛弃工作区修改 
git add # 将工作文件修改提交到本地暂存区 
git add . # 将所有修改过的工作文件提交暂存区 
git rm # 从版本库中删除文件 
git rm –cached # 从版本库中删除文件，但不删除文件 
git reset # 从暂存区恢复到工作文件 
git reset – . # 从暂存区恢复到工作文件 
git reset –hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改 
git ci git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做git ci -am “some comments” 
git ci –amend # 修改最后一次提交记录 
git revert # 恢复某次提交的状态，恢复动作本身也创建次提交对象 
git revert HEAD # 恢复最后一次提交的状态	
		
		
		
