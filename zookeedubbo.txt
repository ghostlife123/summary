分布式 了解一下
http://www.cnblogs.com/zengkefu/p/5742617.html

	dubbo分布式服务框架
		角色:
			暴露服务的提供方
			调用服务的消费方
			注册服务与发现服务的注册中心(zookeeper)
			统计调用次数,调用时间的监控中心
			运行服务的容器
		dubbo提供很多协议,RMI协议,Hessian协议
	zookeeper 作为dubbo的注册中心
	zookeeper 分布式的服务框架,树形的目录服务的数据储存,能做到集群管理数据,

	配置
		修改配置文件
			dataDir=F:\\JAVA\\zookeeper-3.4.10\\data
			dataLogDir=F:\\JAVA\\zookeeper-3.4.10\\data
		配置环境变量
		
		
		
	MQ消息队列
		JMS:JAVA平台上  面向消息中间件的技术规范
		基础流程:
			获取连接工厂---->创建JMS连接---->启动连接---->创建JMS Session---->创建生产者
			---->通过Session指定Destination---->创建消息并发送---->创建消费者
			----->通过Session指定Destination----->接收消息---->关闭资源
		消息队列作用:处理高并发,缓解服务器压力,程序解耦合,跨平台,跨语言
		两种模型:
			点对点模式(Quene):	
				队列(Queue),生产者(procedure),消费者(consumer)
				每个消息被发送到一个特定队列,消费者从队列中获取消息,队列保存消息直到他们被消费为止
				每个消息只有一个消费者,生产者和消费者在时间上没有依赖性
				消费者收到消息之后需要向队列应答成功
				典型例子:打电话
			订阅发布模式(Topic):
				主题(Topic),发布者(Publisher),订阅者(Subscriber)
				发布者将消息发送到主题,系统将这些消息发送给多个订阅者
				没有消息有多个订阅者,发布者和订阅者有时间上的依赖关系
				必须创建订阅者之后,才能消费发布者的消息,为了消费消息,订阅者必须保持运行状态
				为了缓和这样严格的时间相关性,JMS允许订阅者创建一个可持久化订阅,即使订阅者没有被运行,也能接收到消息
				典型例子:邮件订阅,
		同步和异步对于发送消息可靠性上有区别
			消息发送可靠性:消息在网络连接异常断开,进程异常重启之后所有消息都不丢失
			同步在等待ACK超时表示之后,发送方可以重新发送
			异步方式,中间件存在缓存,进程重启之后,缓存被清空
		两种消息处理的方法
			同步:通过MessageConsumer.receive()方法来处理接收到的消息
			异步:注册一个MessageListener方法,调用MessageConsumer.setMessageListener();
		ActiveMQ整合Spring
		1.连接工厂
			连接工厂SingleConnectionFactory	用于产生连接JMS服务器的连接
			真正产生连接到JMS服务器的连接还是由JMS服务厂商提供 ActiveMQConnectionFactory
			ActiveMQ为我们提供一个连接池PooledConnectionFactory
				向里面注入一个ActiveMQConnectionFactory 可以将connection,session,messageProducer池化
		2.生产者
			利用Spring提供的JmsTemplate类来实现,注入spring提供的连接工厂
			设置目的地:队列目的地,主题(topic)目的地
		3.消费者
			创建消息处理类 通过实现MessageListener
			配置消息监听容器
				需要注入连接工厂,消息监听器,目的地(destination);
		<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->  
		<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">  
			<!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 -->  
			<property name="connectionFactory" ref="connectionFactory"/>  
		</bean>  
		  
		<!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供-->  
		<bean id="targetConnectionFactory" class="org.apache.activemq.ActiveMQConnectionFactory">  
			<property name="brokerURL" value="tcp://localhost:61616"/>  
		</bean>  
		  
		<!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory -->  
		<bean id="connectionFactory" class="org.springframework.jms.connection.SingleConnectionFactory">  
			<!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory -->  
			<property name="targetConnectionFactory" ref="targetConnectionFactory"/>  
		</bean>  
		  
		<!--这个是队列目的地-->  
		<bean id="queueDestination" class="org.apache.activemq.command.ActiveMQQueue">  
			<constructor-arg>  
				<value>queue</value>  
			</constructor-arg>  
		</bean>  
		<!-- 消息监听器 -->  
		<bean id="consumerMessageListener" class="com.tiantian.springintejms.listener.ConsumerMessageListener"/>  
		<!-- 消息监听容器 -->  
		<bean id="jmsContainer"  
			class="org.springframework.jms.listener.DefaultMessageListenerContainer">  
			<property name="connectionFactory" ref="connectionFactory" />  
			<property name="destination" ref="queueDestination" />  
			<property name="messageListener" ref="consumerMessageListener" />  
			<property name="subscriptionDurable" value="true" />
		</bean>  
		
		
		
		
		
		